#!/bin/ksh
set -ex

set -ax 

. header.sh

cd $WRK
WDIR=`hostname`$$
Workdir $WDIR


trap "Trapbody $WDIR ; exit 1" 0



############################################################
# script for HARMONIE CARRA data processing:
#  - conversion to CARRA-GRIB2
#  - archiving in MARS
#  - checking what was archived

############################################################

dtg=$DTG
#dtg=$1
date=$(echo $dtg | cut -c1-8)
hh=$(echo $dtg | cut -c9-10)

# Convert precise fields for given $date, $type and $levtype and write them to $outdir
convert=1
if [ "$CARRA_GRIB2_ARCHIVE" == "yes" ];then
  archive=1
  echo "WARNING! You are pushing to MARS $MARS_DATABASE"
else
  archive=0
  echo "INFO! skip pushing to MARS"
fi
archive=0 # do archiving when a full day is complete


database=${MARS_DATABASE-marsscratch}
version=prod # MARS expver of PRECISE data for production
levtypes="sfc pl ml hl soil"
types="an fc"

## Archive all grib2 data in $outdir in one go
## setting archive=0 for testing that things are set up properly
## when running first time, for testing that all is ok...use test env.
## set archive = 1 when all is ok for using it for real...
# for testing purpuse only use next line, as well as version=test, a few lines down...
#archive=1
## when done with testing, comment above and use next line (uncomment first)
#archive=1
##        then when all is ok set version=prod also do not forget to 

# directory set up
bin=$HM_LIB/util/carra_grib2/archive # location of script and grib_filter rule files
inpdir=$WRK/carra_grib1 # input hirlam grib1 dir
outdir=$WRK/carra_grib2 # output grib2 dir

[ -d $outdir ] || $MKDIR $outdir
[ -d ${outdir}_tmp ] || $MKDIR ${outdir}_tmp


############################################################

echo $ECCODES_DEFINITION_PATH
export ECCODES_DEFINITION_PATH=/usr/local/apps/eccodes/2.15.0/GNU/63/share/eccodes/definitions
GRIB_DEFINITION_PATH_TMP=$GRIB_DEFINITION_PATH
export GRIB_DEFINITION_PATH=""
module swap gcc/6.3.0
module unload grib_api
module unload eccodes
module load eccodes/2.15.0
module load python3/3.6.8-01


#grib_info

if [[ "$version" == "prod" ]] ; then
  expver="prod"
elif [[ "$version" == "test" ]] ; then
  expver="test"
fi

if [[ "$DOMAIN" == "CARRA_NE" ]]; then
   origin="NO-AR-CE"
   suiteName="no-ar-ce"
elif [[ "$DOMAIN" == "CARRA_SW" || "$DOMAIN" == "IGB" ]];then
   origin="NO-AR-CW"
   suiteName="no-ar-cw"
fi




if [[ "$convert" == "1" ]] ; then

  rm -f $outdir/*$date*.grib2
  rm -f ${outdir}_tmp/*$date*.grib2
  for type in $types ; do
    if [[ "$type" == "fc" ]] ; then
      xlevtypes=$levtypes
    else
      xlevtypes=$levtypes
    fi
    for levtype in $xlevtypes ; do
      if [[ "$levtype" == "sfc" || "$levtype" == "soil" ]] ; then
        frules=rules.hirlam.convert.sl.batch
      else
        frules=rules.hirlam.convert.vl.batch
      fi

      ls $inpdir/${type}_${levtype}_${date}*.grib1 > flist
 
      cat flist
      sed "s|@outdir@|${outdir}_tmp|g;s|@version@|$expver|g;s|@type@|$type|g;s|@origin@|$origin|g" $bin/$frules > rules.batch

      for f in $(cat flist) ; do
#        grib_info
        grib_filter  rules.batch $f
      done

      if [[ "$levtype" == "soil" ]] ; then
        clevtype="sol"
      else  
        clevtype=$levtype
      fi
    done
  done

fi

if [[ "$hh" == "00" || "$hh" == "12" ]]; then
  archived_expected=8677
  fclen="long"
else
  archived_expected=3881
  fclen="short"
fi

ls ${outdir}_tmp/*.${date}.*.grib2 > flist
for f in $(cat flist) ; do
#    ln -fs $f .
  basenam="$(basename -- $f)"
  time grib_set "-scentre=enmi,tablesVersion=23,productionStatusOfProcessedData=10,grib2LocalSectionPresent=1,suiteName=$suiteName" $f  $basenam
  time tigge_check -u -c  "$(basename -- $f)" || exit 1
  time python3 $bin/make_archive_request.py $basenam '--database' $database >> archive.batch_$basenam
  mv $basenam $outdir/$basenam
  mv archive.batch_$basenam $outdir/
done





if [[ "$archive" == "1" ]] ; then

  ###########
  # archive

  s=0
  for i in $(grep EXPECT archive.batch | sed 's/[^0-9]*//g');do
    s=$((s + $i))
  done

  if [[ "$s" != "$archived_expected" ]]; then
    echo "$date: Different number of fields to be archived than expected: $s ($archived_expected)!"
    echo "ABORTING!"
    exit 1
  fi

  mars -n -t archive.batch || exit 1

  [[ $? != 0 ]] && exit -1
  
  #########
  # check 
 
  # Verify that the expected number of fields ($archived_expected) were archived and the MARS field list 
  #   for actual day is the same as the reference one ($tree_ref)

  max_tries=3
  k=0
  while [ "$k" -lt "$max_tries" ];do
    all_good=0
    rm -rf tree.out cost.out
  
    mars -n -t << EOF
list,
      class      = RR,
      origin     = $origin,
      stream     = oper,
      type       = all,
      DATE       = $date,
      time       = ${hh}00,
      levtype    = all,
      expver     = $version,
      database   = $database,
      target     = tree.out,
      hide       = file/length/offset/id/missing/cost/branch/date/hdate/month/year/time,
      output     = tree

list,
      class      = RR,
      hide       = file/length/offset/id/missing/cost/branch/param/levtype/levelist/expver/type/class/stream/origin/date/time/step/number/hdate/month/year/time,
      target     = cost.out,
      output     = table
EOF

    archived=$(cat cost.out| grep ^Entries|sed s/,//g| sed 's/.*: //')
    if [[ "$archived" != "$archived_expected" ]] ; then
      echo "$date: Different number of fields archived than expected: $archived ($archived_expected)! try $k"
    else
      all_good=$((all_good + 1))
    fi
 
    
    tree_ref=$bin/carra-${suiteName}-${fclen}.tree.reference.out
    if [[ $(diff tree.out ${tree_ref}) ]] ; then
      echo "$date: Different fields archived than expected. Check the reference and current MARS list outputs! try $k"
    else
      all_good=$((all_good + 1))
    fi
  
    if [[ "$all_good" -eq "2" ]]; then
      break
    else
      echo "try #$k"
      sleep 5
    fi

    k=$((k+1))

  done
  
  if [[ "$all_good" -eq "2" ]]; then
    echo "Archiving successful"
  else
    echo "Archive check failed!"
    exit 1
  fi

fi


#rm -rf ${outdir}_tmp
rm -f flist glist rules.batch mars.batch ifile

export GRIB_DEFINITION_PATH=$GRIB_DEFINITION_PATH_TMP

trap - 0

exit
